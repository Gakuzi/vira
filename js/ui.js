// js/ui.js
export function renderWeeks(weeks) {
  const container = document.getElementById('weeks-container');
  container.innerHTML = weeks.map(week => `
    <div class="week-card" data-week-id="${week.id}">
      <div class="week-header">
        <div class="week-title" onclick="toggleWeek(${week.id})">
          üìÖ ${week.title} (${week.start_date} ‚Äì ${week.end_date})
        </div>
        <div>
          <span class="week-status ${week.status === 'approved' ? 'status-approved' : 'status-draft'}">
            ${week.status === 'approved' ? '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ' : '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'}
          </span>
          <button class="btn btn-success" onclick="approveWeek(${week.id})" ${week.status === 'approved' ? 'disabled' : ''}>
            ${week.status === 'approved' ? '‚úì' : '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å'}
          </button>
        </div>
      </div>
      <div class="progress-bar">
        <div class="progress-fill" style="width:${week.progress}%"></div>
      </div>
      <div class="days-grid" id="days-${week.id}" style="display:none;"></div>
    </div>
  `).join('');
  
  container.innerHTML += `<button class="btn btn-primary" onclick="createNewWeek()">‚ûï –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è</button>`;
}

export function renderDays(weekId, daysMap) {
  const container = document.getElementById(`days-${weekId}`);
  if (!container) return;
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
  const daysHTML = [];
  const start = new Date(document.querySelector(`.week-card[data-week-id="${weekId}"] .week-title`).textContent.split('(')[1].split(' ‚Äì ')[0]);
  const end = new Date(document.querySelector(`.week-card[data-week-id="${weekId}"] .week-title`).textContent.split(' ‚Äì ')[1].split(')')[0]);
  let current = new Date(start);
  
  while (current <= end) {
    const day = current.getDay();
    if (day !== 0 && day !== 6) {
      const dateStr = current.toISOString().split('T')[0];
      daysHTML.push(`
        <div class="day-card">
          <div class="day-header">
            <span>${formatDate(dateStr)}</span>
            <span>${getDayName(dateStr)}</span>
          </div>
          <div id="events-${weekId}-${dateStr}">
            ${(daysMap[dateStr] || []).map(event => `
              <div class="event">
                <div class="event-header">
                  <span>${event.author}</span>
                  <span class="event-time">${new Date(event.created_at).toLocaleTimeString()}</span>
                </div>
                <div>${event.content}</div>
              </div>
            `).join('')}
          </div>
          <div class="comment-form">
            <select id="type-${weekId}-${dateStr}">
              <option value="interview">üé§</option>
              <option value="note">üìù</option>
              <option value="meeting">üìÖ</option>
              <option value="comment">üí¨</option>
            </select>
            <textarea id="content-${weekId}-${dateStr}" placeholder="–¢–µ–∫—Å—Ç..."></textarea>
            <button class="btn btn-primary" onclick="addEvent(${weekId}, '${dateStr}')">+</button>
          </div>
        </div>
      `);
    }
    current.setDate(current.getDate() + 1);
  }
  
  container.innerHTML = daysHTML.join('');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDate(dateStr) {
  const d = new Date(dateStr);
  return `${String(d.getDate()).padStart(2, '0')}.${String(d.getMonth() + 1).padStart(2, '0')}`;
}

function getDayName(dateStr) {
  const names = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
  return names[new Date(dateStr).getDay()];
}
